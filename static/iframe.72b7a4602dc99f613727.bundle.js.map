{"version":3,"file":"static/iframe.72b7a4602dc99f613727.bundle.js","sources":["webpack:///./src/index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst react_universal_interface_1 = require(\"react-universal-interface\");\nconst tiny_invariant_1 = require(\"tiny-invariant\");\nconst defaultInterpolate = (strs, args) => {\n    let str = '', i = 0;\n    for (; i < args.length; i++)\n        str += strs[i] + args[i];\n    return str + strs[i];\n};\nexports.createTranslations = (ns = 'main') => {\n    var _a;\n    const context = React.createContext({});\n    const { Consumer } = context;\n    const Provider = (_a = class extends React.Component {\n            constructor(props) {\n                super(props);\n                this.load = async (locale, ns) => {\n                    if (!this.state.map[locale]) {\n                        this.state.map[locale] = {};\n                    }\n                    if (!this.state.map[locale][ns]) {\n                        this.state.map[locale][ns] = {};\n                        this.setState(Object.assign({}, this.state));\n                        tiny_invariant_1.default(this.props.loader, 'use-t provider .loader() prop not set.');\n                        const translations = await this.props.loader(locale, ns);\n                        this.state.map[locale][ns] = translations;\n                        this.setState(Object.assign({}, this.state));\n                    }\n                };\n                this.setLocale = (locale) => {\n                    if (!this.state.map[locale])\n                        this.state.map[locale] = {};\n                    this.setState({ locale });\n                };\n                this.createT = (nss = []) => {\n                    const { locale } = this.state;\n                    const translationsNamespaced = this.state.map[locale];\n                    for (const ns of nss) {\n                        if (!translationsNamespaced[ns]) {\n                            this.load(locale, ns).catch(err => console.error(err));\n                        }\n                    }\n                    const t = (key, ...args) => {\n                        for (const currentLocale of [locale, this.props.defaultLocale]) {\n                            if (!currentLocale)\n                                break;\n                            const translationsNamespaced = this.state.map[currentLocale];\n                            for (const namespace of nss) {\n                                const translations = translationsNamespaced[namespace];\n                                const value = translations[key];\n                                if (value !== undefined) {\n                                    return typeof value === 'function'\n                                        ? value(...args) : value || key;\n                                }\n                            }\n                        }\n                        return key;\n                    };\n                    t.t = key => (strs, ...args) => {\n                        const result = t(key, ...args);\n                        if (result !== key)\n                            return result;\n                        else\n                            return defaultInterpolate(strs, args);\n                    };\n                    return t;\n                };\n                const { map = {}, locale, defaultLocale, ns } = props;\n                // Normalize translation map.\n                if (!map[defaultLocale])\n                    map[defaultLocale] = { [ns]: {} };\n                else if (!map[defaultLocale][ns])\n                    map[defaultLocale][ns] = {};\n                if (!map[locale])\n                    map[locale] = { [ns]: {} };\n                else if (!map[locale][ns])\n                    map[locale][ns] = {};\n                this.state = {\n                    locale,\n                    ns,\n                    map,\n                    load: this.load,\n                    setLocale: this.setLocale,\n                    createT: this.createT,\n                };\n            }\n            render() {\n                return React.createElement(context.Provider, {\n                    value: this.state,\n                    children: this.props.children,\n                });\n            }\n        },\n        _a.defaultProps = {\n            locale: 'en',\n            defaultLocale: 'en',\n            ns,\n        },\n        _a);\n    const defaultT = k => k;\n    defaultT.t = key => (strs, ...args) => defaultInterpolate(strs, args);\n    const useT = (namespaces) => {\n        const nss = namespaces instanceof Array ? namespaces : [namespaces || ns];\n        const state = React.useContext(context);\n        return [state.createT ? state.createT(nss) : defaultT, state];\n    };\n    const withT = (Comp, nss = ns) => {\n        if (!Array.isArray(nss))\n            nss = [nss];\n        const Enhanced = props => {\n            const [t, T] = useT(nss);\n            return React.createElement(Comp, Object.assign({}, props, { t, T }));\n        };\n        return Enhanced;\n    };\n    const Trans = (props) => {\n        const nss = props.ns instanceof Array\n            ? props.ns : [props.ns || ns];\n        const [t, T] = useT(nss);\n        return react_universal_interface_1.render(props, { t, T });\n    };\n    return {\n        Consumer,\n        Provider,\n        context,\n        useT,\n        Trans,\n        withT,\n    };\n};\n"],"mappings":"AACA","sourceRoot":""}